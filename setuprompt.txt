# Full C++ Blockchain with Broadcast P2P and Django Dashboard - Project Setup Prompt

## Project Requirements

Create a complete blockchain system with the following architecture:

### **Core Architecture**
```
C++ Blockchain Node (Port 8333 P2P, Port 8080 API)
├── Blockchain Core Engine
├── Broadcast P2P Network
├── Transaction Mempool
├── REST API Server
└── Mining Engine

Django Web Dashboard (Port 3000)
├── Real-time Network Monitoring
├── Node Management Interface
├── Transaction Viewer
├── WebSocket Live Updates
└── Network Statistics
```

## **C++ Node Implementation Requirements**

### **1. Core Components Needed**

#### **Blockchain Engine**
- Block class with SHA-256 hashing
- Blockchain class with thread-safe chain management
- JSON persistence with atomic file operations
- Proof-of-Work mining with adjustable difficulty
- Chain validation and integrity checking
- Genesis block creation

#### **Transaction System** 
- Transaction class with digital signatures
- TransactionPool for pending transactions
- UTXO (Unspent Transaction Output) model
- Transaction validation and verification
- Double-spend prevention

#### **P2P Broadcast Network**
- UDP broadcast for network discovery
- TCP connections for data transfer
- Message types: BLOCK_BROADCAST, TX_BROADCAST, PEER_DISCOVERY, CHAIN_SYNC
- Automatic peer discovery on local network
- Message flooding algorithm for broadcasts
- Duplicate message prevention

#### **REST API Server**
- HTTP server using crow/httplib/beast
- Endpoints for blockchain data, transactions, network status
- CORS enabled for Django dashboard access
- JSON response format
- Real-time statistics endpoint

### **2. Broadcast P2P Protocol Specification**

#### **Network Discovery**
- Nodes broadcast UDP discovery messages on startup
- Respond with node ID, chain height, and TCP port
- Maintain active peer list with heartbeat mechanism
- Auto-connect to discovered peers via TCP

#### **Message Broadcasting**
- New blocks: Broadcast to all connected peers immediately
- New transactions: Flood network using gossip protocol
- Chain sync: Request missing blocks from peers with higher height
- Message deduplication using message IDs and timestamps

#### **Network Topology**
- Fully connected mesh for small networks (<50 nodes)
- Gossip protocol for larger networks
- No central coordination - pure P2P
- Automatic network healing and reconnection

### **3. Required C++ Dependencies**
- **OpenSSL**: Cryptographic operations (SHA-256, ECDSA)
- **nlohmann/json**: JSON parsing and serialization
- **ASIO**: Asynchronous networking (TCP/UDP)
- **Crow/httplib**: HTTP server for REST API
- **fmt**: String formatting
- **spdlog**: Logging system

### **4. Build System**
- CMake configuration with dependency management
- Support for Linux, macOS, Windows
- Compiler: GCC 9+, Clang 10+, MSVC 2019+
- C++17 standard minimum
- Dockerization for easy deployment

## **Django Dashboard Requirements**

### **1. Core Features**
- Real-time network topology visualization
- Live blockchain explorer with block/transaction details
- Node status monitoring (online/offline, chain height)
- Network statistics (hash rate, transaction throughput)
- Transaction mempool viewer
- Manual transaction creation interface

### **2. Real-time Updates**
- WebSocket connections to C++ nodes
- Periodic polling of node REST APIs
- Live charts for network metrics
- Real-time transaction feeds
- Block mining notifications

### **3. Django Components**
- Models: Node, Block, Transaction, NetworkStats
- WebSocket consumers using Django Channels
- REST API views for node communication
- Real-time dashboard with Chart.js
- Responsive UI with Tailwind CSS

### **4. Database Schema**
```sql
Nodes: id, node_id, ip_address, port, last_seen, chain_height, is_active
Blocks: id, block_index, hash, previous_hash, timestamp, data, node_source
Transactions: id, tx_hash, from_addr, to_addr, amount, timestamp, status
NetworkStats: id, timestamp, total_nodes, network_height, tx_count
```

## **Communication Flow**

### **Node-to-Node (C++ Broadcast)**
```
1. Node A creates new block
2. Node A broadcasts BLOCK_BROADCAST to all peers
3. Peers validate block and add to chain
4. Peers rebroadcast to their connections
5. Network converges on new block
```

### **Django-to-Node (HTTP API)**
```
1. Django polls node /api/status every 5 seconds
2. Node returns JSON with chain height, peers, mempool
3. Django updates database and pushes to WebSocket
4. Frontend receives real-time updates
```

### **User Interactions**
```
1. User creates transaction in Django dashboard
2. Django POST to node /api/transactions
3. Node validates and adds to mempool
4. Node broadcasts TX_BROADCAST to network
5. Miners include in next block
6. Dashboard shows confirmation
```

## **Project Structure**
```
blockchain_project/
├── cpp_node/
│   ├── src/
│   │   ├── blockchain/
│   │   ├── p2p/
│   │   ├── api/
│   │   └── main.cpp
│   ├── include/
│   ├── tests/
│   ├── CMakeLists.txt
│   └── Dockerfile
├── django_dashboard/
│   ├── blockchain_dashboard/
│   ├── dashboard/
│   ├── static/
│   ├── templates/
│   ├── requirements.txt
│   └── docker-compose.yml
├── docs/
├── scripts/
└── README.md
```

## **Key Implementation Specifications**

### **Broadcast Algorithm**
- Use UDP multicast (224.0.0.0/4) for local network discovery
- TCP persistent connections for reliable data transfer
- Message TTL and hop count to prevent infinite loops
- Exponential backoff for failed connections

### **Consensus Mechanism**
- Longest valid chain wins (simple Nakamoto consensus)
- Proof-of-Work with adjustable difficulty
- Block time target: 10 seconds
- Difficulty adjustment every 100 blocks

### **Transaction Format**
```json
{
  "id": "tx_hash",
  "inputs": [{"tx_id": "prev_tx", "output_index": 0, "signature": "..."}],
  "outputs": [{"address": "recipient", "amount": 1000}],
  "timestamp": 1640995200,
  "signature": "digital_signature"
}
```

### **API Endpoints**
```
GET /api/blockchain - Full blockchain data
GET /api/block/{index} - Specific block
GET /api/transactions - Mempool transactions
POST /api/transactions - Submit new transaction
GET /api/peers - Connected peer list
GET /api/status - Node status and stats
POST /api/mine - Trigger block mining
```

### **Performance Targets**
- Handle 1000+ transactions per second
- Support 100+ concurrent peer connections
- Block propagation under 2 seconds
- Dashboard updates in real-time (<500ms latency)
- Memory usage under 1GB for full node

### **Security Requirements**
- ECDSA digital signatures for transactions
- Merkle tree for block integrity
- Rate limiting on API endpoints
- Input validation on all network messages
- Secure random number generation

This prompt provides the complete specification for building a production-ready blockchain system with C++ nodes using broadcast P2P communication and a Django dashboard for monitoring and management.
